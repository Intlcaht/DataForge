a bash script provides the following usage options, 
<>

# ==========================================
# Usage: ./script.sh [options]
# Defaults: config file = config.yml
# Database identifier format: <db_type>.<db_name>
# ==========================================

# Basic Operations:
# -----------------
# - Provision Databases (from config.yml):
# ./script.sh -p

# # - Clear Data:
# ./script.sh -C -d postgres.main_db

# # - Backup Database:
# ./script.sh -b -d mysql.sales_db backups/sales_backup.sql

# # - Restore Database:
# ./script.sh -r -d postgres.main_db backups/main_db_restore.sql

# # - Delete Database:
# ./script.sh -D -d mongo.analytics_db

# # - Help:
# ./script.sh -h


# # Extended Operations:
# # --------------------
# # - Use Custom Config File:
# ./script.sh -c custom_config.yml -p

# # - Validate Config File:
# ./script.sh --validate

# # - Detect Schema Drift:
# ./script.sh --drift-check -d postgres.main_db

# # - Rotate Secrets:
# ./script.sh --rotate-secrets -d mongo.logs_db

# # - Mask Production Data:
# ./script.sh --mask-data -d mysql.crm_db --target-env staging

# # - Simulate Disaster Recovery:
# ./script.sh --simulate-dr -d postgres.main_db

# # - Generate Schema Documentation:
# ./script.sh --doc-schema -d postgres.main_db --output docs/schema.md

# # - Tag Environment:
# ./script.sh --tag-env --env production

# # - Trigger Monitoring Alert Test:
# ./script.sh --trigger-alert -d mysql.billing_db --scenario high_latency

# # - Sandbox Database for Testing:
# ./script.sh --sandbox -d mongo.test_data --ttl 2h

# # - Enable/Disable RBAC:
# ./script.sh --rbac --enable -d postgres.core_db
# ./script.sh --rbac --disable -d postgres.core_db

# # - Apply Retention Policy:
# ./script.sh --retention-policy --days 30 -d postgres.logs_db

# # - Check Cost Estimates:
# ./script.sh --check-cost -d mysql.prod_db

# # - Test Auth Policy:
# ./script.sh --test-auth-policy -d postgres.secure_db

# # - Lint All Configs (CI/CD safe):
# ./script.sh --lint-all --ci

# # - Plan Schema Changes (Dry Run):
# ./script.sh --plan-schema -d mysql.orders_db

# # - Apply Approved Schema Changes:
# ./script.sh --apply-schema -d mysql.orders_db

</>
A python method is given from a utilities to execute the script i.e 
<>
run_sh(["-c custom_config.yml -p"])
</>

write a comprehensive python class to interact with this script through this method to provide all usage features from the script, document each function and add verbose comments on the file