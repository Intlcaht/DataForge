/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as EnvImport } from './routes/env'
import { Route as DatabasesImport } from './routes/databases'
import { Route as IndexImport } from './routes/index'
import { Route as AuthCallbackImport } from './routes/auth/callback'

// Create/Update Routes

const EnvRoute = EnvImport.update({
  id: '/env',
  path: '/env',
  getParentRoute: () => rootRoute,
} as any)

const DatabasesRoute = DatabasesImport.update({
  id: '/databases',
  path: '/databases',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/databases': {
      id: '/databases'
      path: '/databases'
      fullPath: '/databases'
      preLoaderRoute: typeof DatabasesImport
      parentRoute: typeof rootRoute
    }
    '/env': {
      id: '/env'
      path: '/env'
      fullPath: '/env'
      preLoaderRoute: typeof EnvImport
      parentRoute: typeof rootRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/databases': typeof DatabasesRoute
  '/env': typeof EnvRoute
  '/auth/callback': typeof AuthCallbackRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/databases': typeof DatabasesRoute
  '/env': typeof EnvRoute
  '/auth/callback': typeof AuthCallbackRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/databases': typeof DatabasesRoute
  '/env': typeof EnvRoute
  '/auth/callback': typeof AuthCallbackRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/databases' | '/env' | '/auth/callback'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/databases' | '/env' | '/auth/callback'
  id: '__root__' | '/' | '/databases' | '/env' | '/auth/callback'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DatabasesRoute: typeof DatabasesRoute
  EnvRoute: typeof EnvRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DatabasesRoute: DatabasesRoute,
  EnvRoute: EnvRoute,
  AuthCallbackRoute: AuthCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/databases",
        "/env",
        "/auth/callback"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/databases": {
      "filePath": "databases.tsx"
    },
    "/env": {
      "filePath": "env.tsx"
    },
    "/auth/callback": {
      "filePath": "auth/callback.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
