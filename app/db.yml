# =============================
# Centralized Database Configs
# =============================
# Version: 1.0.0
# Author: Database DevOps Team
# Date: 2025-04-08
#
# This configuration file manages all database connection and control policies
# in one place. It is designed to be secure, scalable, and environment-aware.
# It enables developers, testers, and DevOps engineers to:
# - Define database credentials through secure environment variables
# - Enable/disable features depending on the environment (dev, staging, prod)
# - Maintain consistency across environments with migration and compliance controls
# - Apply least-privilege principles with granular user access

metadata:
  environment: "development"
  version_control_enabled: true
  # ----------------------
  # Migration Plan
  # ----------------------
  # To maintain a clear state of migrations, follow these steps:
  # 1. **Versioning:** Use a versioning system for migration files (e.g., sequential numbering or timestamps).
  # 2. **Tracking:** Keep a log of applied migrations in each environment (development, staging, production).
  # 3. **Testing:** Test migrations in a staging environment before applying them to production.
  # 4. **Rollback:** Have a rollback plan for each migration in case of failure.
  # 5. **Documentation:** Document each migration with a description of the changes and the reason for the migration.
  migration_plan_enabled: true
  tags: ["secure", "central-config"]

storage:
  postgres:
    locations:
      local:
        admin: "${POSTGRES_ADMIN}"
        admin_password: "${POSTGRES_ADMIN_PASSWORD}"
        host: "localhost"
        port: 5432
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 1
      us-east:
        admin: "${POSTGRES_ADMIN}"
        admin_password: "${POSTGRES_ADMIN_PASSWORD}"
        host: "us-east-postgres.example.com"
        port: 5432
        scaling:
          auto_scaling: true
          min_instances: 2
          max_instances: 10
      eu-west:
        admin: "${POSTGRES_ADMIN}"
        admin_password: "${POSTGRES_ADMIN_PASSWORD}"
        host: "eu-west-postgres.example.com"
        port: 5432
        scaling:
          auto_scaling: true
          min_instances: 1
          max_instances: 5
    databases:
      itlc_users:
        location: "local"  # Specify the location of this database
        users:
          - username: "admin"
            password: "${ADMIN_PASSWORD}"
            permissions: ["INSERT", "UPDATE", "DELETE", "SELECT"]
          - username: "api"
            password: "${API_PASSWORD}"
            permissions: ["INSERT", "UPDATE", "SELECT"]
          - username: "client"
            password: "${CLIENT_PASSWORD}"
            permissions: ["SELECT"]
      itlc_api:
        location: "us-east"  # Specify the location of this database
        users:
          - username: "admin"
            password: "${ADMIN_PASSWORD}"
            permissions: ["INSERT", "UPDATE", "DELETE", "SELECT"]
          - username: "app_writer"
            password: "${APP_WRITER_PASSWORD}"
            permissions: ["INSERT", "UPDATE", "DELETE"]
          - username: "app_reader"
            password: "${APP_READER_PASSWORD}"
            permissions: ["SELECT"]
      itlc_orders:
        location: "eu-west"  # Specify the location of this database
        users:
          - username: "report_viewer"
            password: "${REPORT_VIEWER_PASSWORD}"
            permissions: ["SELECT"]
    controls:
      - name: "connection_pooling"
        description: "Ensure connection pooling is enabled using PgBouncer to manage database connections efficiently."
      - name: "audit_logging"
        description: "Enable audit logging for all databases to track access and modifications."
      - name: "migration_files"
        location: "/path/to/postgres/migrations"
        description: "Specify the location of migration files to maintain a clear state of database schema changes."

  # MariaDB / MySQL Configuration
  mariadb:
    locations:
      local:
        admin: "${MARIADB_ADMIN}"
        admin_password: "${MARIADB_ADMIN_PASSWORD}"
        host: "localhost"
        port: 3306
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 1
      us-west:
        admin: "${MARIADB_ADMIN}"
        admin_password: "${MARIADB_ADMIN_PASSWORD}"
        host: "us-west-mariadb.example.com"
        port: 3306
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 3
    databases:
      itlc_templates:
        location: "us-west"  # Specify the location of this database
        users:
          - username: "wp_admin"
            password: "${WP_ADMIN_PASSWORD}"
            permissions: ["ALL PRIVILEGES"]
      itlc_tokens:
        location: "local"  # Specify the location of this database
        users:
          - username: "analytics_reader"
            password: "${ANALYTICS_READER_PASSWORD}"
            permissions: ["SELECT"]
    controls:
      - name: "backup_automation"
        description: "Ensure automated backups are configured to prevent data loss."
      - name: "ip_whitelisting"
        description: "Restrict access to specific IP addresses to enhance security."
      - name: "migration_files"
        location: "/path/to/mariadb/migrations"
        description: "Specify the location of migration files to maintain a clear state of database schema changes."

  # MongoDB Configuration
  mongodb:
    locations:
      local:
        admin: "${MONGODB_ADMIN}"
        admin_password: "${MONGODB_ADMIN_PASSWORD}"
        host: "localhost"
        port: 27017
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 1
      ap-south:
        admin: "${MONGODB_ADMIN}"
        admin_password: "${MONGODB_ADMIN_PASSWORD}"
        host: "ap-south-mongodb.example.com"
        port: 27017
        scaling:
          auto_scaling: true
          min_instances: 3
          max_instances: 8
    databases:
      itlc_pbfr:
        location: "ap-south"  # Specify the location of this database
        users:
          - username: "app_user"
            password: "${MONGO_APP_USER_PASSWORD}"
            roles:
              - role: "readWrite"
                db: "app_data"
          - username: "app_monitor"
            password: "${MONGO_APP_MONITOR_PASSWORD}"
            roles:
              - role: "clusterMonitor"
                db: "admin"
      logs:
        location: "local"  # Specify the location of this database
        users:
          - username: "log_reader"
            password: "${MONGO_LOG_READER_PASSWORD}"
            roles:
              - role: "read"
                db: "logs"
    controls:
      - name: "replication_setup"
        description: "Set up replication for high availability and data redundancy."
      - name: "migration_files"
        location: "/path/to/mongodb/migrations"
        description: "Specify the location of migration files to maintain a clear state of database schema changes."

  # Neo4j Configuration
  neo4j:
    locations:
      admin: "${NEO4J_ADMIN}"
      admin_password: "${NEO4J_ADMIN_PASSWORD}"
      local:
        host: "localhost"
        port: 7687
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 1
    databases:
      pipeline_db:
        location: "local"  # Specify the location of this database
        users:
          - username: "graph_editor"
            password: "${GRAPH_EDITOR_PASSWORD}"
            roles: ["editor"]
          - username: "graph_reader"
            password: "${GRAPH_READER_PASSWORD}"
            roles: ["reader"]

  # Redis Configuration
  redis:
    locations:
      local:
        admin_password: "${REDIS_ADMIN_PASSWORD}"
        host: "localhost"
        port: 6379
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 1
    databases:
      cache:
        location: "local"  # Specify the location of this database
        users:
          - password: "${REDIS_CACHE_PASSWORD}"
            acl: "on >cache *~* +@write"
      session:
        location: "local"  # Specify the location of this database
        users:
          - password: "${REDIS_SESSION_PASSWORD}"
            acl: "on >session *~* +@read"
    controls:
      - name: "monitoring_integration"
        description: "Integrate with monitoring tools like Prometheus to track performance."

  # InfluxDB 2.x Configuration
  influxdb:
    locations:
      local:
        admin_token: "${INFLUXDB_ADMIN_TOKEN}"
        host: "localhost"
        port: 8086
        scaling:
          auto_scaling: false
          min_instances: 1
          max_instances: 1
    
    databases:
      metrics:
        location: "local"  # Specify the location of this database
        bucket: "app_metrics"
        org: "dev_org"
        users:
          - username: "metrics_writer"
            token: "${METRICS_WRITER_TOKEN}"
            permissions: ["write"]
      monitoring:
        location: "local"  # Specify the location of this database
        bucket: "sys_monitoring"
        org: "dev_org"
        users:
          - username: "monitoring_reader"
            token: "${MONITORING_READER_TOKEN}"
            permissions: ["read"]
    controls:
      - name: "token_rotation"
        description: "Regularly review and rotate tokens to minimize the risk of unauthorized access."
      # - name: "backup_verification"
      #   description: "Verify backups are being created and are restorable to ensure data integrity."
      # - name: "migration_files"
      #   location: "/path/to/influxdb/migrations"
      #   description: "Specify the location of migration files to maintain a clear state of database schema changes."

# -------------------------------------
# CONTROL POLICIES & COMPLIANCE RULES
# -------------------------------------
controls:
  audit_logging:
    enabled: true
    destinations: ["S3"]
  access_controls:
    enabled: true
    ip_whitelist: ["192.168.1.0/24", "10.0.0.0/16"]
    least_privilege: true
  monitoring:
    enabled: true
    integrations: ["Prometheus"]
  migration_management:
    enabled: true
    auto_diff: true
    require_review: true
  compliance:
    enabled: true
    gdpr: true
    soc2: true
    pci_dss: false
  backups:
    enabled: true
    retention_days: 30
    test_restore: true

# ------------------------------
# ENVIRONMENT OVERRIDES (Optional)
# ------------------------------
environments:
  development:
    backup_schedule: "weekly"
    controls:
      audit_logging:
  production:
    backup_schedule: "daily"
    controls:
      audit_logging:
      access_controls:
        ip_whitelist: ["10.0.0.0/16"]

# =============================================
# 🔧 HELPER FUNCTION RECOMMENDATIONS (PSEUDOCODE)
# =============================================
# These functions are suggestions for developers using this file programmatically

# 📘 Function: Get database location
# def get_db_location(db_name):
#     for engine in config['storage']:
#         for db in config['storage'][engine]['databases']:
#             if db == db_name:
#                 return config['storage'][engine]['databases'][db]['location']

# 📘 Function: List all users for a database
# def list_db_users(db_name):
#     for engine in config['storage']:
#         for db in config['storage'][engine]['databases']:
#             if db == db_name:
#                 return config['storage'][engine]['databases'][db].get('users', [])

# 📘 Function: Get controls for a storage engine
# def get_controls(engine_name):
#     return config['storage'][engine_name]['controls']

# 📘 Function: Check if a control is enabled
# def is_control_enabled(control_name):
#     return config['controls'].get(control_name, {}).get('enabled', False)

# 📘 Function: Retrieve environment-specific overrides
# def get_env_override(env, setting):
#     return config.get('environments', {}).get(env, {}).get(setting)
